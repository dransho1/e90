import cv2
import numpy as np
import nav 

GAMMA_CORR = 5 #this will change with lighting conditions
GAUSS_BLUR_RAD = 15
CIRCLE_CENTER = (327,190)
#CIRCLE_CENTER = (309, 192)
CIRC_RADIUS = 142
SHOW = True
def find_beacon(img):
    img = cv2.GaussianBlur(img, (GAUSS_BLUR_RAD, GAUSS_BLUR_RAD), 0)
    (minVal, maxVal, min_loc, max_loc) = cv2.minMaxLoc(img)
    image = img.copy()
    cv2.circle(image, max_loc, GAUSS_BLUR_RAD, (255, 0, 0), 2)
    return max_loc

def gamma_correction(img, correction):
    """
    http://py-fu.blogspot.com/2014/04/
    simple-gamma-correction-with-opencv.html
    """
    img = img/255.0
    img = cv2.pow(img, correction)
    return np.uint8(img*255)

def find_circs(imag):
    return CIRCLE_CENTER, CIRC_RADIUS

def find_angles_for(dots, center):
    dot_centers = {}
    angle_to = {}
    for dot in dots:
        dot_centers[dot] = find_beacon(dots[dot])
    for dot_center in dot_centers:
        beacon = dot_centers[dot_center]
        angle_to[dot_center] = (np.arctan2(-(beacon[0]-center[0]), 
                                        (beacon[1]-center[1])))
    #print(angle_to)
    return(angle_to, dot_centers)

def operate_on(image, dome_center, dome_radius, gamma=GAMMA_CORR):
    #dome_center = tuple(int(x) for x in find_circs(image)[0])
    #print(dome_center)
    dome_center = CIRCLE_CENTER
    dome_radius = int(dome_radius - 10)
    
    working_copy = image.copy()
    display = image.copy()
    blank = np.zeros(image.shape, dtype=np.uint8)
    cv2.circle(blank, dome_center, int(dome_radius), (1,1,1), -1)
    cv2.circle(blank, dome_center, int(dome_radius-50), (0,0,0), -1)
    working_copy = cv2.multiply(blank, working_copy)
    gci = gamma_correction(working_copy, gamma)
    b,g,r = cv2.split(gci)
    bb = cv2.GaussianBlur(b, (15,15), 0)
    rb = cv2.GaussianBlur(r, (15,15), 0)
    gb = cv2.GaussianBlur(g, (15,15), 0)

    #Subtract other colors to penalize white
    b = cv2.subtract(b, rb)
    b = cv2.subtract(b, gb)
    r = cv2.subtract(r, bb)
    r = cv2.subtract(r, gb)
    g = cv2.subtract(g, rb)
    g = cv2.subtract(g, bb)

    #Apply morphological closing to image to close holes
    kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE,(30,30))
    b = cv2.morphologyEx(b, cv2.MORPH_CLOSE, kernel)
    r = cv2.morphologyEx(r, cv2.MORPH_CLOSE, kernel)
    g = cv2.morphologyEx(g, cv2.MORPH_CLOSE, kernel)


    if SHOW:
        cv2.imshow("blue", b)
        cv2.imshow("red", r)
        cv2.imshow("green", g)
    dot_dict = {}
    dot_dict['blue'] = b
    dot_dict['red'] = r
    dot_dict['green'] = g
    angle_to, dots = find_angles_for(dot_dict, dome_center)
    #angle_to['blue'] = np.radians(-106.699)
    #angle_to['red'] = np.radians(85.03)
    #angle_to['green'] = np.radians(-71.71)
    color_dict = {
            'blue':(255,0,0),
            'green':(0,255,0),
            'red':(0,0,255)}
    for pt in dots:
        cv2.circle(display, dots[pt], 10, color_dict[pt], 2) 
    if SHOW:
        cv2.circle(display, dome_center, 10, (255, 255, 255), 2)
        cv2.circle(display, dome_center, dome_radius, (0,0,0), 2)
        cv2.circle(display, dome_center, dome_radius-70, (0,0,0), 2)
        cv2.imshow("display", display)
    loc = nav.guess_position_from(angle_to)
    print("{} {} {}".format(-10+loc[0], -10+loc[1], -1*np.degrees(loc[2])))
    print([[color, np.degrees(angle_to[color]+loc[2])] for color in angle_to.keys()])
    #print(angle_to)
    #while cv2.waitKey(5) < 0: pass
    return gci, -1*np.array(10-loc[0], 10-loc[1], loc[2])

def main():
    imag = cv2.imread('robust_test.jpg')
    blank = np.zeros(imag.shape, dtype=np.uint8)
    dome_center, radius = find_circs(imag)
    cv2.circle(blank, dome_center, int(radius-40), (1, 1, 1), -1)
    imag = cv2.multiply(blank, imag)
    gci = gamma_correction(imag, GAMMA_CORR)
    #cv2.imshow("gamma", gci)
    #cv2.waitKey()
    b,g,r = cv2.split(gci)
    #cv2.imshow("blue", b)
    #cv2.waitKey()
    dot_dict = {}
    dot_dict['blue'] = b
    dot_dict['red'] = r
    dot_dict['green'] = g
    #find_angles_for(dot_dict, dome_center)

    operate_on(imag, dome_center, radius, GAMMA_CORR)

#main()
