import socket
import time, sys
import datetime
import cv2
import gi
gi.require_version('Gst', '1.0')
from gi.repository import GObject, Gst
import numpy as np
from time import sleep
import sys
import navigator
from stream import on_new_buffer

"""
AUTO CONTROL | Noah Weinthal
Series of routines to autonomously control the car.
"""

CTL_DUMMY = 0
CTL_LINEAR_PURE_PURSUIT = 1

class Vehicle():
    def __init__(self, socket):
        self.server         = socket
        self.throttle       = 0
        self.steering_angle = 0
        self.position = np.array([0,0,0])
        self.throttle_gain = -90
        self.steering_gain = 1

    def send_controls(self):
        self.server.send(bytes("CTL", "ASCII"))
        r = self.server.recv(3)
        if r is bytes("RDY", "ASCII"):
            steering = str(int(self.steering_gain*\
                    self.steering_angle)).zfill(5)
            throttle = str(int(self.throttle_gain*\
                    self.throttle)).zfill(5)
            code = steering + throttle
            self.server.send(bytes(code, "ASCII"))


def control_law(pos, manifest = None, law = CTL_DUMMY):
    if law is CTL_DUMMY:
        #Dummy control, set steering angle towards origin
        angle_to_origin = np.degrees(np.arctan2(pos[0], pos[1]) + pos[2])
        return angle_to_origin, 0

def main():
    img = None # Initialize positioning system image
    print("checkpoint 1")
    GObject.threads_init()
    # Socket binding
    if len(sys.argv) is 3:
        ip_addr = sys.argv[1]
        port = int(sys.argv[2])
    elif len(sys.argv) == 1:
         print("connecting on localhost")
         ip_addr = "localhost"
         port = 8888
    else:
         print("Usage: {} <IP ADDR> <PORT> or no args for default"\
                 .format(sys.argv[0]))
         exit()
    s = socket.socket(
            socket.AF_INET, socket.SOCK_STREAM)
    s.connect((ip_addr, port))
    print("Connected")

    # Positioning system handles
    Gst.init(None)
    CLI="tcpclientsrc port=8080 host=192.168.1.104 ! gdpdepay ! rtph264depay ! avdec_h264 ! videoconvert ! video/x-raw, format=BGRx ! appsink name=sink"
    pipline=Gst.parse_launch(CLI)
    appsink=pipline.get_by_name("sink")
    appsink.set_property("max-buffers",20) # prevent the app to consume huge part of memory
    appsink.set_property('emit-signals',True) #tell sink to emit signals
    appsink.set_property('sync',False) #no sync to make decoding as fast as possible
    appsink.connect('new-sample', on_new_buffer) #connect signal to callable func

    print 'entering playing state'
    pipline.set_state(Gst.State.PLAYING)
    print 'playing now'

    cv2.namedWindow('win')
    center = None
    manifest = None
    car = Vehicle(s)
    while 1:
        if img is not None:
            if not center:
                center, rad = navigator.find_circs(img)
            else:
                gci, pos  = navigator.operate_on(img, center, rad, 10)
                car.steering_angle, car.throttle = control_law(pos, manifest)
                car.send_controls()
                print("sent controls")
                cv2.imshow('win', gci)
        k = cv2.waitKey(1)
        if k == 27:
            break

main()
